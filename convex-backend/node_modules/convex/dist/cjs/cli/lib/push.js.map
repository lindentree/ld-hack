{
  "version": 3,
  "sources": ["../../../../src/cli/lib/push.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport {\n  Context,\n  changeSpinner,\n  logFailure,\n  logMessage,\n} from \"../../bundler/context.js\";\nimport { doCodegen } from \"./codegen.js\";\nimport {\n  Config,\n  configFromProjectConfig,\n  diffConfig,\n  pullConfig,\n  pushConfig,\n  readProjectConfig,\n} from \"./config.js\";\nimport { pushSchema } from \"./indexes.js\";\nimport { typeCheckFunctionsInMode } from \"./typecheck.js\";\nimport { ensureHasConvexDependency, functionsDir } from \"./utils.js\";\nimport path from \"path\";\n\nexport type PushOptions = {\n  adminKey: string;\n  verbose: boolean;\n  dryRun: boolean;\n  typecheck: \"enable\" | \"try\" | \"disable\";\n  debug: boolean;\n  debugBundlePath?: string;\n  codegen: boolean;\n  url: string;\n};\n\nexport async function runPush(ctx: Context, options: PushOptions) {\n  const timeRunPushStarts = performance.now();\n  const { configPath, projectConfig } = await readProjectConfig(ctx);\n  const origin = options.url;\n  const verbose = options.verbose || options.dryRun;\n  await ensureHasConvexDependency(ctx, \"push\");\n\n  if (!options.codegen) {\n    logMessage(\n      ctx,\n      chalk.gray(\"Skipping codegen. Remove --codegen=disable to enable.\"),\n    );\n    // Codegen includes typechecking, so if we're skipping it, run the type\n    // check manually on the query and mutation functions\n    const funcDir = functionsDir(configPath, projectConfig);\n    await typeCheckFunctionsInMode(ctx, options.typecheck, funcDir);\n  } else {\n    await doCodegen({\n      ctx,\n      functionsDirectoryPath: functionsDir(configPath, projectConfig),\n      typeCheckMode: options.typecheck,\n      dryRun: options.dryRun,\n      debug: options.debug,\n      quiet: true,\n    });\n    if (verbose) {\n      logMessage(ctx, chalk.green(\"Codegen finished.\"));\n    }\n  }\n\n  const timeBundleStarts = performance.now();\n  const { config: localConfig, bundledModuleInfos } =\n    await configFromProjectConfig(ctx, projectConfig, configPath, verbose);\n\n  if (options.debugBundlePath) {\n    await handleDebugBundlePath(ctx, options.debugBundlePath, localConfig);\n    logMessage(\n      ctx,\n      `Wrote bundle and metadata to ${options.debugBundlePath}. Skipping rest of push.`,\n    );\n    return;\n  }\n\n  const timeSchemaPushStarts = performance.now();\n  const { schemaId, schemaState } = await pushSchema(\n    ctx,\n    origin,\n    options.adminKey,\n    functionsDir(configPath, localConfig.projectConfig),\n    options.dryRun,\n  );\n\n  const timeConfigPullStarts = performance.now();\n  const remoteConfigWithModuleHashes = await pullConfig(\n    ctx,\n    undefined,\n    undefined,\n    origin,\n    options.adminKey,\n  );\n\n  changeSpinner(ctx, \"Diffing local code and deployment state\");\n  const { diffString, stats } = diffConfig(\n    remoteConfigWithModuleHashes,\n    localConfig,\n  );\n  if (diffString === \"\" && schemaState?.state === \"active\") {\n    if (verbose) {\n      const msg =\n        localConfig.modules.length === 0\n          ? `No functions found in ${localConfig.projectConfig.functions}`\n          : \"Config already synced\";\n      logMessage(\n        ctx,\n        chalk.gray(\n          `${\n            options.dryRun\n              ? \"Command would skip function push\"\n              : \"Function push skipped\"\n          }: ${msg}.`,\n        ),\n      );\n    }\n    return;\n  }\n\n  if (verbose) {\n    logMessage(\n      ctx,\n      chalk.bold(\n        `Remote config ${\n          options.dryRun ? \"would\" : \"will\"\n        } be overwritten with the following changes:`,\n      ),\n    );\n    logMessage(ctx, diffString);\n  }\n\n  if (options.dryRun) {\n    return;\n  }\n\n  // Note that this is not quite a user pain metric: we're missing any time\n  // spent making and retrying this network request and receiving the response.\n  const timePushStarts = performance.now();\n  const timing = {\n    typecheck: (timeBundleStarts - timeRunPushStarts) / 1000,\n    bundle: (timeSchemaPushStarts - timeBundleStarts) / 1000,\n    schemaPush: (timeConfigPullStarts - timeSchemaPushStarts) / 1000,\n    codePull: (timePushStarts - timeConfigPullStarts) / 1000,\n    totalBeforePush: (timePushStarts - timeRunPushStarts) / 1000,\n    moduleDiffStats: stats,\n  };\n  await pushConfig(\n    ctx,\n    localConfig,\n    options.adminKey,\n    options.url,\n    timing,\n    schemaId,\n    bundledModuleInfos,\n  );\n}\n\nasync function handleDebugBundlePath(\n  ctx: Context,\n  debugBundleDir: string,\n  config: Config,\n) {\n  if (!ctx.fs.exists(debugBundleDir)) {\n    ctx.fs.mkdir(debugBundleDir);\n  } else if (!ctx.fs.stat(debugBundleDir).isDirectory()) {\n    logFailure(\n      ctx,\n      `Path \\`${debugBundleDir}\\` is not a directory. Please choose an empty directory for \\`--debug-bundle-path\\`.`,\n    );\n    await ctx.crash(1, \"fatal\");\n  } else if (ctx.fs.listDir(debugBundleDir).length !== 0) {\n    logFailure(\n      ctx,\n      `Directory \\`${debugBundleDir}\\` is not empty. Please remove it or choose an empty directory for \\`--debug-bundle-path\\`.`,\n    );\n    await ctx.crash(1, \"fatal\");\n  }\n  ctx.fs.writeUtf8File(\n    path.join(debugBundleDir, \"fullConfig.json\"),\n    JSON.stringify(config),\n  );\n  for (const moduleInfo of config.modules) {\n    const trimmedPath = moduleInfo.path.endsWith(\".js\")\n      ? moduleInfo.path.slice(0, moduleInfo.path.length - \".js\".length)\n      : moduleInfo.path;\n    const environmentDir = path.join(debugBundleDir, moduleInfo.environment);\n    ctx.fs.mkdir(path.dirname(path.join(environmentDir, `${trimmedPath}.js`)), {\n      allowExisting: true,\n      recursive: true,\n    });\n    ctx.fs.writeUtf8File(\n      path.join(environmentDir, `${trimmedPath}.js`),\n      moduleInfo.source,\n    );\n    if (moduleInfo.sourceMap !== undefined) {\n      ctx.fs.writeUtf8File(\n        path.join(environmentDir, `${trimmedPath}.js.map`),\n        moduleInfo.sourceMap,\n      );\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["chalk", "path"]
}
